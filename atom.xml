<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Why am I such a vegetable?</title>
  
  
  <link href="https://mu-sec.github.io/atom.xml" rel="self"/>
  
  <link href="https://mu-sec.github.io/"/>
  <updated>2022-11-16T10:14:31.563Z</updated>
  <id>https://mu-sec.github.io/</id>
  
  <author>
    <name>mu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac&amp;M1本地非docker可调试PWN环境搭建</title>
    <link href="https://mu-sec.github.io/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://mu-sec.github.io/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-11-16T09:16:57.000Z</published>
    <updated>2022-11-16T10:14:31.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>　　由于最近又需要重新复习pwn，但是之前的老电脑跑起来像一台拖拉机一样所以考虑尝试在Mac上搭建一套可以<strong>完美（并不）使用</strong>的pwn环境，思路依然是虚拟机+目录共享。<br>　　众所周知由于M1换了架构，所以x86的程序在本地根本跑不起来，参考之前大佬的的方法搭建了python2和python3两个docker环境，可以跑exp打远程，本地无法调试，显然不符合需求，优点是性能强，共享目录方便，确实是适合救急用，所以平时我会专门开一个桌面用于这两个docker pwn环境，细节可以参考大佬博客。<br>　　<code>https://blog.csdn.net/qq_25755011/article/details/115541221</code><br>　　短暂使用过后发现还是搭一个完美（并不）的环境靠谱，于是开始了折腾之路。</p><p><em><strong>注意：本方法对虚拟机性能会造成较大损失，请根据个人需求判断是否可以接受</strong></em></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>　　首先放一下我的配置，M1 pro 32g内存，已更macOS 13。</p><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E9%85%8D%E7%BD%AE.jpg"></p></div><p>　　虚拟机选用UTM，ubuntu选用ubuntu20.04.1 LTS</p><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/utm.jpg"></p></div><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/ubuntu.jpg"></p></div><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><p>　　想要搞到完美的x86模拟环境肯定需要一台可以模拟x86指令集的虚拟机，由于pd和vm暂时都没有对软件模拟x86进行支持，所以这里我们选择安装UTM进行软件模拟虚拟机。这里直接在github下载安装即可，同时需要准备好ubuntu镜像。<br><code>https://github.com/utmapp/UTM/releases/latest/download/UTM.dmg　　#UTM虚拟机</code><br><code>https://releases.ubuntu.com/focal/ubuntu-20.04.5-desktop-amd64.iso　　#Ubuntu 20.04x86-64</code><br>　　安装完成之后，打开UTM，新建虚拟机，选择模拟（我这里已经安装完一个虚拟机，可能界面不同）  </p><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/UTM1.jpg"></p></div>  <p>　　这里选择linux，继续往下走。</p><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/UTM2.jpg"></p></div> <p>　　这里选择启动光盘镜像，随后选择你下载的ubuntu的镜像文件，下一步。</p><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/UTM3.jpg"></p></div> <p>　　在这里的设置其实对虚拟机跑起来的性能影响不大，模拟出的cpu默认也不支持多核，所以默认即可，也可以把内存设置大一点、设置个4核图一个心理安慰，下一步。</p><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/UTM4.jpg"></p></div> <p>　　这里影响也不大，我们后期会使用本地目录共享挂载到虚拟机使用，这里的驱动器大小设置64、128看个人情况，下一步。</p><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/UTM5.jpg"></p></div><p>　　在你的本机创建一个目录，然后在这里选择他，这个目录就是以后宿主机与虚拟机的文件共享的目录，具体后面会详细说明，暂时先设置，但是不会生效。</p><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/UTM6.jpg"></p></div> <p>　　这里起一个自己喜欢的名字即可，保存后启动虚拟机，开始正常的ubuntu安装过程。</p><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/UTM7.jpg"></p></div> <p>安装完毕后，<strong>取消</strong>CD&#x2F;DVD的装载后，设置网络为<strong>桥接</strong>后进入系统。</p><p>　　<strong>提示：这里安装ubuntu的过程和vm安装的过程完全一样，就是非常非常非常慢，耐心等待安装即可，后面会对其进行优化</strong></p><h2 id="SSH连接"><a href="#SSH连接" class="headerlink" title="SSH连接"></a>SSH连接</h2><p>　　UTM自带的UI界面简直不能再卡，本身模拟就很卡，基本无法操作，所以暂时先忍受卡顿安装SSH服务，用本机的远程连接操作shell会好很多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sudo apt update</span><br><span class="line"># sudo apt install openssh-server</span><br></pre></td></tr></table></figure><p>出现提示一路回车，安装完毕后可以使用以下指令查看服务状态，该服务默认自启。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo systemctl status openssh-server</span><br></pre></td></tr></table></figure><p>然后查看虚拟机ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ifconfig </span><br><span class="line"># 如果报错，执行</span><br><span class="line"># sudo apt-get install net-tools</span><br></pre></td></tr></table></figure><p>查看本机ip,第一个网卡里的ip就是我们虚拟机的ip，此时可以尝试用宿主机去ping一下，应该可以ping通。</p><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/ip.jpg"></p></div> <p>随后我们就可以用mac的终端<strong>新建远程连接</strong>到ubuntu。</p><h2 id="配置共享文件夹"><a href="#配置共享文件夹" class="headerlink" title="配置共享文件夹"></a>配置共享文件夹</h2><p>　　这里我们采用WebDAV实现共享文件夹,安装SPICE、WebDAV。本节中建议所有操作先在root下进行，或者全程sudo。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># apt update</span><br><span class="line"># apt install spice-vdagent spice-webdavd </span><br></pre></td></tr></table></figure><p>　　配置UTM共享选项，选择SPICE WebDAV</p><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/UTM8.jpg"></p></div> <p>此时进入系统后，可以访问网络中其他位置找到共享文件夹，该文件内容与此前设置的共享路径一致，但是此时的问题是命令行无法访问到该目录，仅可通过网络访问，地址如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># http://localhost:9843  #默认端口为9843,这个链接指向UTM设置的共享路径</span><br></pre></td></tr></table></figure><p>（由于写教程时已经卸载桌面，所以没有截图）</p><p>为了实现需求，我们安装davfs2实现挂载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sudo apt update</span><br><span class="line"># sudo apt install davfs2</span><br></pre></td></tr></table></figure><p>安装完成后，可以直接使用以下指令挂载davfs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># sudo mount -t davfs http://localhost:9843 &lt;your path&gt;</span><br><span class="line">e.g. </span><br><span class="line"># sudo mount -t davfs http://localhost:9843 /User/mu/mac-share</span><br></pre></td></tr></table></figure><p>此时便可以访问挂载点，该操作可能会要求输入用户名和密码，该步骤输入什么都可以，UTM的共享本身没有身份校验，可以一路回车，也可以输入任意值，建议输入1，1</p><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/share1.jpg"><br><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/share2.jpg"></p></div> <h2 id="实现开机免密自动挂载"><a href="#实现开机免密自动挂载" class="headerlink" title="实现开机免密自动挂载"></a>实现开机免密自动挂载</h2><p>首先开启用户锁，删除use_locks前面的#并把1改为0，命令如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo vim /etc/davfs2/davfs2.conf</span><br></pre></td></tr></table></figure><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/lock.jpg"></p></div> <p>之后，保存用户名和密码,在最下面新起一行添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sudo vim /etc/davfs2/secrets</span><br><span class="line"># 添加 &lt;你的WebDAV地址 1 1&gt;</span><br></pre></td></tr></table></figure><p>在这里由于我们没有身份验证，所以直接使用1进行占位，添加  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># http://localhost:9843 1 1</span><br></pre></td></tr></table></figure><div align="center"><p><img src="/2022/11/16/Mac-M1%E6%9C%AC%E5%9C%B0%E9%9D%9Edocker%E5%8F%AF%E8%B0%83%E8%AF%95PWN%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/pass.jpg"></p></div> <p>保存退出，此时可以取消挂载，并重新挂载试一下，不需要回车了，可以直接挂载成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sudo umount &lt;your path&gt;</span><br><span class="line"># sudo mount -t davfs http://localhost:9843 &lt;your path&gt;</span><br></pre></td></tr></table></figure><p>随后开启开机自动挂载,添加配置信息到如下文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># sudo vim /etc/fstab</span><br><span class="line"># 添加 http://localhost:9843 &lt;你的虚拟机内路径&gt; davfs defaults 0 0</span><br></pre></td></tr></table></figure><p>保存后即可实现开机自动挂载</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>　　由于我装的桌面版ubuntu，又不想直接用服务器版，两者差异比较难习惯，所以在此卸载桌面版臃肿的桌面系统，提高系统流畅度，具体流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo vim /etc/default/grub</span><br></pre></td></tr></table></figure><p>修改<br>GRUB_CMDLINE_LINUX_DEFAULT&#x3D;“quiet splash”<br>　　　　　　　　　⬇️<br>GRUB_CMDLINE_LINUX_DEFAULT&#x3D;“text”<br>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># sudo update-grub</span><br><span class="line"># sudo systemctl set-default multi-user.target</span><br><span class="line"># sudo reboot</span><br><span class="line"># 重启后</span><br><span class="line"># sudo apt-get remove gnome-shell</span><br><span class="line"># sudo apt-get remove gnome</span><br><span class="line"># sudo apt-get autoremove</span><br><span class="line"># sudo apt-get purge gnome</span><br><span class="line"># sudo snap remove store</span><br><span class="line"># sudo snap remove gnome*</span><br><span class="line"># sudo apt remove snapd</span><br><span class="line"># sudo apt-get autoclean</span><br><span class="line"># sudo apt-get clean</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>　　自此，你就拥有了一个X86架构的pwn环境，只需要在比赛前提前打开虚拟机，宿主机远程连接使用，赛题通过共享文件夹同步，pwn环境配置不再赘述，大佬们写了很多，可以自己选择搭配自己的环境。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　就个人使用而言，我感觉虽然有些卡顿，但是足以满足日常使用，各位大佬有更好的方法也欢迎分享跟我，目前这是我能想到的一个笔记本实现pwn环境的最优解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;　　由于最近又需要重新复习pwn，但是之前的老电脑跑起来像一台拖拉机一样所以考虑尝试在Mac上搭建一套可以&lt;strong&gt;完美（并不）使用&lt;</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://mu-sec.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
